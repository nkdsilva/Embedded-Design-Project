
Final_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800200  00000636  000006ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000636  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800296  00800296  00000760  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000790  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000007d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a0f  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d2f  00000000  00000000  0000229f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa2  00000000  00000000  00002fce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00003a70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000638  00000000  00000000  00003b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000085a  00000000  00000000  000041d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00004a2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e3       	ldi	r30, 0x36	; 54
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 39       	cpi	r26, 0x96	; 150
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e9       	ldi	r26, 0x96	; 150
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 39       	cpi	r26, 0x98	; 152
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	5d d2       	rcall	.+1210   	; 0x5da <main>
 120:	88 c2       	rjmp	.+1296   	; 0x632 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <Lcd_CmdWrite>:
	if (row == 0 && pos<16)
	Lcd_CmdWrite((pos & 0x0F)|0x80); /* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	Lcd_CmdWrite((pos & 0x0F)|0xC0); /* Command of first row and required position<16 */
	LCD_String(str); /* Call LCD string function */
}
 124:	98 2f       	mov	r25, r24
 126:	90 7f       	andi	r25, 0xF0	; 240
 128:	92 b9       	out	0x02, r25	; 2
 12a:	92 b1       	in	r25, 0x02	; 2
 12c:	9e 7f       	andi	r25, 0xFE	; 254
 12e:	92 b9       	out	0x02, r25	; 2
 130:	92 b1       	in	r25, 0x02	; 2
 132:	9d 7f       	andi	r25, 0xFD	; 253
 134:	92 b9       	out	0x02, r25	; 2
 136:	92 b1       	in	r25, 0x02	; 2
 138:	94 60       	ori	r25, 0x04	; 4
 13a:	92 b9       	out	0x02, r25	; 2
 13c:	ef e3       	ldi	r30, 0x3F	; 63
 13e:	fc e9       	ldi	r31, 0x9C	; 156
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <Lcd_CmdWrite+0x1c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <Lcd_CmdWrite+0x22>
 146:	00 00       	nop
 148:	92 b1       	in	r25, 0x02	; 2
 14a:	9b 7f       	andi	r25, 0xFB	; 251
 14c:	92 b9       	out	0x02, r25	; 2
 14e:	ef e3       	ldi	r30, 0x3F	; 63
 150:	fc e9       	ldi	r31, 0x9C	; 156
 152:	31 97       	sbiw	r30, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <Lcd_CmdWrite+0x2e>
 156:	00 c0       	rjmp	.+0      	; 0x158 <Lcd_CmdWrite+0x34>
 158:	00 00       	nop
 15a:	f0 e1       	ldi	r31, 0x10	; 16
 15c:	8f 9f       	mul	r24, r31
 15e:	c0 01       	movw	r24, r0
 160:	11 24       	eor	r1, r1
 162:	82 b9       	out	0x02, r24	; 2
 164:	82 b1       	in	r24, 0x02	; 2
 166:	8e 7f       	andi	r24, 0xFE	; 254
 168:	82 b9       	out	0x02, r24	; 2
 16a:	82 b1       	in	r24, 0x02	; 2
 16c:	8d 7f       	andi	r24, 0xFD	; 253
 16e:	82 b9       	out	0x02, r24	; 2
 170:	82 b1       	in	r24, 0x02	; 2
 172:	84 60       	ori	r24, 0x04	; 4
 174:	82 b9       	out	0x02, r24	; 2
 176:	8f e3       	ldi	r24, 0x3F	; 63
 178:	9c e9       	ldi	r25, 0x9C	; 156
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <Lcd_CmdWrite+0x56>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <Lcd_CmdWrite+0x5c>
 180:	00 00       	nop
 182:	82 b1       	in	r24, 0x02	; 2
 184:	8b 7f       	andi	r24, 0xFB	; 251
 186:	82 b9       	out	0x02, r24	; 2
 188:	ef e3       	ldi	r30, 0x3F	; 63
 18a:	fc e9       	ldi	r31, 0x9C	; 156
 18c:	31 97       	sbiw	r30, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <Lcd_CmdWrite+0x68>
 190:	00 c0       	rjmp	.+0      	; 0x192 <Lcd_CmdWrite+0x6e>
 192:	00 00       	nop
 194:	08 95       	ret

00000196 <Lcd_DataWrite>:
 196:	98 2f       	mov	r25, r24
 198:	90 7f       	andi	r25, 0xF0	; 240
 19a:	92 b9       	out	0x02, r25	; 2
 19c:	92 b1       	in	r25, 0x02	; 2
 19e:	91 60       	ori	r25, 0x01	; 1
 1a0:	92 b9       	out	0x02, r25	; 2
 1a2:	92 b1       	in	r25, 0x02	; 2
 1a4:	9d 7f       	andi	r25, 0xFD	; 253
 1a6:	92 b9       	out	0x02, r25	; 2
 1a8:	92 b1       	in	r25, 0x02	; 2
 1aa:	94 60       	ori	r25, 0x04	; 4
 1ac:	92 b9       	out	0x02, r25	; 2
 1ae:	ef e3       	ldi	r30, 0x3F	; 63
 1b0:	fc e9       	ldi	r31, 0x9C	; 156
 1b2:	31 97       	sbiw	r30, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <Lcd_DataWrite+0x1c>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <Lcd_DataWrite+0x22>
 1b8:	00 00       	nop
 1ba:	92 b1       	in	r25, 0x02	; 2
 1bc:	9b 7f       	andi	r25, 0xFB	; 251
 1be:	92 b9       	out	0x02, r25	; 2
 1c0:	ef e3       	ldi	r30, 0x3F	; 63
 1c2:	fc e9       	ldi	r31, 0x9C	; 156
 1c4:	31 97       	sbiw	r30, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <Lcd_DataWrite+0x2e>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <Lcd_DataWrite+0x34>
 1ca:	00 00       	nop
 1cc:	f0 e1       	ldi	r31, 0x10	; 16
 1ce:	8f 9f       	mul	r24, r31
 1d0:	c0 01       	movw	r24, r0
 1d2:	11 24       	eor	r1, r1
 1d4:	82 b9       	out	0x02, r24	; 2
 1d6:	82 b1       	in	r24, 0x02	; 2
 1d8:	81 60       	ori	r24, 0x01	; 1
 1da:	82 b9       	out	0x02, r24	; 2
 1dc:	82 b1       	in	r24, 0x02	; 2
 1de:	8d 7f       	andi	r24, 0xFD	; 253
 1e0:	82 b9       	out	0x02, r24	; 2
 1e2:	82 b1       	in	r24, 0x02	; 2
 1e4:	84 60       	ori	r24, 0x04	; 4
 1e6:	82 b9       	out	0x02, r24	; 2
 1e8:	8f e3       	ldi	r24, 0x3F	; 63
 1ea:	9c e9       	ldi	r25, 0x9C	; 156
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <Lcd_DataWrite+0x56>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <Lcd_DataWrite+0x5c>
 1f2:	00 00       	nop
 1f4:	82 b1       	in	r24, 0x02	; 2
 1f6:	8b 7f       	andi	r24, 0xFB	; 251
 1f8:	82 b9       	out	0x02, r24	; 2
 1fa:	ef e3       	ldi	r30, 0x3F	; 63
 1fc:	fc e9       	ldi	r31, 0x9C	; 156
 1fe:	31 97       	sbiw	r30, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <Lcd_DataWrite+0x68>
 202:	00 c0       	rjmp	.+0      	; 0x204 <Lcd_DataWrite+0x6e>
 204:	00 00       	nop
 206:	08 95       	ret

00000208 <Lcd_init>:
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	8c df       	rcall	.-232    	; 0x124 <Lcd_CmdWrite>
 20c:	88 e2       	ldi	r24, 0x28	; 40
 20e:	8a df       	rcall	.-236    	; 0x124 <Lcd_CmdWrite>
 210:	8e e0       	ldi	r24, 0x0E	; 14
 212:	88 df       	rcall	.-240    	; 0x124 <Lcd_CmdWrite>
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	86 df       	rcall	.-244    	; 0x124 <Lcd_CmdWrite>
 218:	80 e8       	ldi	r24, 0x80	; 128
 21a:	84 cf       	rjmp	.-248    	; 0x124 <Lcd_CmdWrite>
 21c:	08 95       	ret

0000021e <LCD_String>:
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	8c 01       	movw	r16, r24
 228:	c0 e0       	ldi	r28, 0x00	; 0
 22a:	d0 e0       	ldi	r29, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <LCD_String+0x14>
 22e:	b3 df       	rcall	.-154    	; 0x196 <Lcd_DataWrite>
 230:	21 96       	adiw	r28, 0x01	; 1
 232:	f8 01       	movw	r30, r16
 234:	ec 0f       	add	r30, r28
 236:	fd 1f       	adc	r31, r29
 238:	80 81       	ld	r24, Z
 23a:	81 11       	cpse	r24, r1
 23c:	f8 cf       	rjmp	.-16     	; 0x22e <LCD_String+0x10>
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	1f 91       	pop	r17
 244:	0f 91       	pop	r16
 246:	08 95       	ret

00000248 <keycheck>:



char keycheck()
{
	PORTC=0B01111111;
 248:	8f e7       	ldi	r24, 0x7F	; 127
 24a:	88 b9       	out	0x08, r24	; 8
	//_delay_ms(10);
	if((PINC & 0B00001000)==0)//123A
 24c:	33 9b       	sbis	0x06, 3	; 6
 24e:	20 c0       	rjmp	.+64     	; 0x290 <keycheck+0x48>
	{
		return '1';
	}
	if((PINC & 0B00000100)==0)
 250:	32 9b       	sbis	0x06, 2	; 6
 252:	20 c0       	rjmp	.+64     	; 0x294 <keycheck+0x4c>
	{
		return '2';
	}
	if((PINC & 0B00000010)==0)
 254:	31 9b       	sbis	0x06, 1	; 6
 256:	20 c0       	rjmp	.+64     	; 0x298 <keycheck+0x50>
	{
		return '3';
	}
	PORTC=0B10111111;//465B
 258:	8f eb       	ldi	r24, 0xBF	; 191
 25a:	88 b9       	out	0x08, r24	; 8
	//_delay_ms(10);
	if((PINC & 0B00001000)==0)
 25c:	33 9b       	sbis	0x06, 3	; 6
 25e:	1e c0       	rjmp	.+60     	; 0x29c <keycheck+0x54>
	{
		return '4';
	}
	if((PINC & 0B00000100)==0)
 260:	32 9b       	sbis	0x06, 2	; 6
 262:	1e c0       	rjmp	.+60     	; 0x2a0 <keycheck+0x58>
	{
		return '5';
	}
	if((PINC & 0B00000010)==0)
 264:	31 9b       	sbis	0x06, 1	; 6
 266:	1e c0       	rjmp	.+60     	; 0x2a4 <keycheck+0x5c>
	{
		return '6';
	}
	PORTC=0B11011111;//789C
 268:	8f ed       	ldi	r24, 0xDF	; 223
 26a:	88 b9       	out	0x08, r24	; 8
	//_delay_ms(10);
	if((PINC & 0B00001000)==0)
 26c:	33 9b       	sbis	0x06, 3	; 6
 26e:	1c c0       	rjmp	.+56     	; 0x2a8 <keycheck+0x60>
	{
		return '7';
	}
	if((PINC & 0B00000100)==0)
 270:	32 9b       	sbis	0x06, 2	; 6
 272:	1c c0       	rjmp	.+56     	; 0x2ac <keycheck+0x64>
	{
		return '8';
	}
	if((PINC & 0B00000010)==0)
 274:	31 9b       	sbis	0x06, 1	; 6
 276:	1c c0       	rjmp	.+56     	; 0x2b0 <keycheck+0x68>
	{
		return '9';
	}
	PORTC=0B11101111;//*0#D
 278:	8f ee       	ldi	r24, 0xEF	; 239
 27a:	88 b9       	out	0x08, r24	; 8
	//_delay_ms(10);
	if((PINC & 0B00001000)==0)
 27c:	33 9b       	sbis	0x06, 3	; 6
 27e:	1a c0       	rjmp	.+52     	; 0x2b4 <keycheck+0x6c>
	{
		return '*';
	}
	if((PINC & 0B00000100)==0)
 280:	32 9b       	sbis	0x06, 2	; 6
 282:	1a c0       	rjmp	.+52     	; 0x2b8 <keycheck+0x70>
	{
		return '0';
	}
	if((PINC & 0B00000010)==0)
 284:	31 9b       	sbis	0x06, 1	; 6
 286:	1a c0       	rjmp	.+52     	; 0x2bc <keycheck+0x74>
	{
		return '#';
	}
	if((PINC & 0B00000001)==0)
 288:	30 99       	sbic	0x06, 0	; 6
 28a:	1a c0       	rjmp	.+52     	; 0x2c0 <keycheck+0x78>
	{
		return'D';
 28c:	84 e4       	ldi	r24, 0x44	; 68
 28e:	08 95       	ret
{
	PORTC=0B01111111;
	//_delay_ms(10);
	if((PINC & 0B00001000)==0)//123A
	{
		return '1';
 290:	81 e3       	ldi	r24, 0x31	; 49
 292:	08 95       	ret
	}
	if((PINC & 0B00000100)==0)
	{
		return '2';
 294:	82 e3       	ldi	r24, 0x32	; 50
 296:	08 95       	ret
	}
	if((PINC & 0B00000010)==0)
	{
		return '3';
 298:	83 e3       	ldi	r24, 0x33	; 51
 29a:	08 95       	ret
	}
	PORTC=0B10111111;//465B
	//_delay_ms(10);
	if((PINC & 0B00001000)==0)
	{
		return '4';
 29c:	84 e3       	ldi	r24, 0x34	; 52
 29e:	08 95       	ret
	}
	if((PINC & 0B00000100)==0)
	{
		return '5';
 2a0:	85 e3       	ldi	r24, 0x35	; 53
 2a2:	08 95       	ret
	}
	if((PINC & 0B00000010)==0)
	{
		return '6';
 2a4:	86 e3       	ldi	r24, 0x36	; 54
 2a6:	08 95       	ret
	}
	PORTC=0B11011111;//789C
	//_delay_ms(10);
	if((PINC & 0B00001000)==0)
	{
		return '7';
 2a8:	87 e3       	ldi	r24, 0x37	; 55
 2aa:	08 95       	ret
	}
	if((PINC & 0B00000100)==0)
	{
		return '8';
 2ac:	88 e3       	ldi	r24, 0x38	; 56
 2ae:	08 95       	ret
	}
	if((PINC & 0B00000010)==0)
	{
		return '9';
 2b0:	89 e3       	ldi	r24, 0x39	; 57
 2b2:	08 95       	ret
	}
	PORTC=0B11101111;//*0#D
	//_delay_ms(10);
	if((PINC & 0B00001000)==0)
	{
		return '*';
 2b4:	8a e2       	ldi	r24, 0x2A	; 42
 2b6:	08 95       	ret
	}
	if((PINC & 0B00000100)==0)
	{
		return '0';
 2b8:	80 e3       	ldi	r24, 0x30	; 48
 2ba:	08 95       	ret
	}
	if((PINC & 0B00000010)==0)
	{
		return '#';
 2bc:	83 e2       	ldi	r24, 0x23	; 35
 2be:	08 95       	ret
	}
	if((PINC & 0B00000001)==0)
	{
		return'D';
	}
	return 'a';
 2c0:	81 e6       	ldi	r24, 0x61	; 97
}
 2c2:	08 95       	ret

000002c4 <getKey>:

char getKey()
{
	char key='a';
 2c4:	81 e6       	ldi	r24, 0x61	; 97
	while(key=='a')
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <getKey+0x6>
	{
		key=keycheck();
 2c8:	bf df       	rcall	.-130    	; 0x248 <keycheck>
}

char getKey()
{
	char key='a';
	while(key=='a')
 2ca:	81 36       	cpi	r24, 0x61	; 97
 2cc:	e9 f3       	breq	.-6      	; 0x2c8 <getKey+0x4>
	{
		key=keycheck();
	}
	return key;
}
 2ce:	08 95       	ret

000002d0 <getUserInput>:
		changePassword();
	}
}

void getUserInput(void)
{
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
	for(int i=0;i<4;i++)
 2d4:	c0 e0       	ldi	r28, 0x00	; 0
 2d6:	d0 e0       	ldi	r29, 0x00	; 0
 2d8:	16 c0       	rjmp	.+44     	; 0x306 <getUserInput+0x36>
	{
		key=getKey();
 2da:	f4 df       	rcall	.-24     	; 0x2c4 <getKey>
 2dc:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <key>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e0:	2f ef       	ldi	r18, 0xFF	; 255
 2e2:	83 ed       	ldi	r24, 0xD3	; 211
 2e4:	90 e3       	ldi	r25, 0x30	; 48
 2e6:	21 50       	subi	r18, 0x01	; 1
 2e8:	80 40       	sbci	r24, 0x00	; 0
 2ea:	90 40       	sbci	r25, 0x00	; 0
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <getUserInput+0x16>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <getUserInput+0x20>
 2f0:	00 00       	nop
		_delay_ms(1000);
		//LCD_String("*");
		Lcd_DataWrite(key);//change later
 2f2:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <key>
 2f6:	4f df       	rcall	.-354    	; 0x196 <Lcd_DataWrite>
		password[i]=key;
 2f8:	fe 01       	movw	r30, r28
 2fa:	ea 56       	subi	r30, 0x6A	; 106
 2fc:	fd 4f       	sbci	r31, 0xFD	; 253
 2fe:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <key>
 302:	80 83       	st	Z, r24
	}
}

void getUserInput(void)
{
	for(int i=0;i<4;i++)
 304:	21 96       	adiw	r28, 0x01	; 1
 306:	c4 30       	cpi	r28, 0x04	; 4
 308:	d1 05       	cpc	r29, r1
 30a:	3c f3       	brlt	.-50     	; 0x2da <getUserInput+0xa>
		_delay_ms(1000);
		//LCD_String("*");
		Lcd_DataWrite(key);//change later
		password[i]=key;
	}
}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	08 95       	ret

00000312 <checkPassword>:

void checkPassword(void)
{
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
	//CHECK THE PIN
	if ((eeprom_read_byte((uint8_t*)4)==password[0])&&(eeprom_read_byte((uint8_t*)5)==password[1])&&(eeprom_read_byte((uint8_t*)6)==password[2])&&(eeprom_read_byte((uint8_t*)7)==password[3]))
 316:	84 e0       	ldi	r24, 0x04	; 4
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	75 d1       	rcall	.+746    	; 0x606 <eeprom_read_byte>
 31c:	d8 2f       	mov	r29, r24
 31e:	c0 91 96 02 	lds	r28, 0x0296	; 0x800296 <__data_end>
 322:	8c 13       	cpse	r24, r28
 324:	5c c0       	rjmp	.+184    	; 0x3de <checkPassword+0xcc>
 326:	85 e0       	ldi	r24, 0x05	; 5
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	6d d1       	rcall	.+730    	; 0x606 <eeprom_read_byte>
 32c:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <key>
 330:	89 13       	cpse	r24, r25
 332:	55 c0       	rjmp	.+170    	; 0x3de <checkPassword+0xcc>
 334:	86 e0       	ldi	r24, 0x06	; 6
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	66 d1       	rcall	.+716    	; 0x606 <eeprom_read_byte>
 33a:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <__bss_end>
 33e:	89 13       	cpse	r24, r25
 340:	4e c0       	rjmp	.+156    	; 0x3de <checkPassword+0xcc>
 342:	87 e0       	ldi	r24, 0x07	; 7
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	5f d1       	rcall	.+702    	; 0x606 <eeprom_read_byte>
 348:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <__bss_end+0x1>
 34c:	89 13       	cpse	r24, r25
 34e:	47 c0       	rjmp	.+142    	; 0x3de <checkPassword+0xcc>
	{
		LCD_String("ACCESS GRANTED");
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	92 e0       	ldi	r25, 0x02	; 2
 354:	64 df       	rcall	.-312    	; 0x21e <LCD_String>
 356:	2f ef       	ldi	r18, 0xFF	; 255
 358:	39 e6       	ldi	r19, 0x69	; 105
 35a:	88 e1       	ldi	r24, 0x18	; 24
 35c:	21 50       	subi	r18, 0x01	; 1
 35e:	30 40       	sbci	r19, 0x00	; 0
 360:	80 40       	sbci	r24, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <checkPassword+0x4a>
 364:	00 c0       	rjmp	.+0      	; 0x366 <checkPassword+0x54>
 366:	00 00       	nop
 368:	8f ef       	ldi	r24, 0xFF	; 255
		_delay_ms(500);
		//to unlock the safe
		DDRD = 0xFF;//led-blue
 36a:	8a b9       	out	0x0a, r24	; 10
 36c:	91 e0       	ldi	r25, 0x01	; 1
		PORTD = 0B00000001;
 36e:	9b b9       	out	0x0b, r25	; 11
 370:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
		DDRH = 0xFF;//relay-high
 374:	83 e0       	ldi	r24, 0x03	; 3
		PORTH = 0x03;
 376:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
 37a:	9f ef       	ldi	r25, 0xFF	; 255
 37c:	23 ed       	ldi	r18, 0xD3	; 211
 37e:	30 e3       	ldi	r19, 0x30	; 48
 380:	91 50       	subi	r25, 0x01	; 1
 382:	20 40       	sbci	r18, 0x00	; 0
 384:	30 40       	sbci	r19, 0x00	; 0
 386:	e1 f7       	brne	.-8      	; 0x380 <checkPassword+0x6e>
 388:	00 c0       	rjmp	.+0      	; 0x38a <checkPassword+0x78>
 38a:	00 00       	nop
		_delay_ms(1000);
		
		//to lock the safe
		Lcd_CmdWrite(0x01);
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	ca de       	rcall	.-620    	; 0x124 <Lcd_CmdWrite>
		LCD_String("Press #");
 390:	8f e0       	ldi	r24, 0x0F	; 15
 392:	92 e0       	ldi	r25, 0x02	; 2
		Lcd_CmdWrite(0xC0);
 394:	44 df       	rcall	.-376    	; 0x21e <LCD_String>
 396:	80 ec       	ldi	r24, 0xC0	; 192
 398:	c5 de       	rcall	.-630    	; 0x124 <Lcd_CmdWrite>
		LCD_String("to lock");
 39a:	87 e1       	ldi	r24, 0x17	; 23
 39c:	92 e0       	ldi	r25, 0x02	; 2
 39e:	3f df       	rcall	.-386    	; 0x21e <LCD_String>
 3a0:	91 df       	rcall	.-222    	; 0x2c4 <getKey>
		
		key=getKey();
 3a2:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <key>
 3a6:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <key>
		lock[0]=key;
 3aa:	83 32       	cpi	r24, 0x23	; 35
 3ac:	09 f0       	breq	.+2      	; 0x3b0 <checkPassword+0x9e>
		if(lock[0]=='#')
 3ae:	43 c0       	rjmp	.+134    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 3b0:	8f ef       	ldi	r24, 0xFF	; 255
 3b2:	8a b9       	out	0x0a, r24	; 10
		{
			DDRD = 0xFF;//LED-red
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	8b b9       	out	0x0b, r24	; 11
			PORTD = 0B00000001;
 3b8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
			DDRH=0x00;//relay-low
 3bc:	8f ef       	ldi	r24, 0xFF	; 255
 3be:	9b e7       	ldi	r25, 0x7B	; 123
 3c0:	22 e9       	ldi	r18, 0x92	; 146
 3c2:	81 50       	subi	r24, 0x01	; 1
 3c4:	90 40       	sbci	r25, 0x00	; 0
 3c6:	20 40       	sbci	r18, 0x00	; 0
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <checkPassword+0xb0>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <checkPassword+0xba>
 3cc:	00 00       	nop
			//PORTH=0B11110111;
			_delay_ms(3000);
			PORTH=0x00;//relay
 3ce:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
			Lcd_CmdWrite(0x01);
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	a7 de       	rcall	.-690    	; 0x124 <Lcd_CmdWrite>
			LCD_String("LOCKED");
 3d6:	8f e1       	ldi	r24, 0x1F	; 31
 3d8:	92 e0       	ldi	r25, 0x02	; 2
 3da:	21 df       	rcall	.-446    	; 0x21e <LCD_String>
 3dc:	2c c0       	rjmp	.+88     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		}
	}
	else if ((eeprom_read_byte((uint8_t*)4)!=password[0])||(eeprom_read_byte((uint8_t*)5)!=password[1])||(eeprom_read_byte((uint8_t*)6)!=password[2])||(eeprom_read_byte((uint8_t*)7)!=password[3]))
 3de:	dc 13       	cpse	r29, r28
 3e0:	15 c0       	rjmp	.+42     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3e2:	85 e0       	ldi	r24, 0x05	; 5
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0f d1       	rcall	.+542    	; 0x606 <eeprom_read_byte>
 3e8:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <key>
 3ec:	89 13       	cpse	r24, r25
 3ee:	0e c0       	rjmp	.+28     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3f0:	86 e0       	ldi	r24, 0x06	; 6
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	08 d1       	rcall	.+528    	; 0x606 <eeprom_read_byte>
 3f6:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <__bss_end>
 3fa:	89 13       	cpse	r24, r25
 3fc:	07 c0       	rjmp	.+14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3fe:	87 e0       	ldi	r24, 0x07	; 7
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	01 d1       	rcall	.+514    	; 0x606 <eeprom_read_byte>
 404:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <__bss_end+0x1>
 408:	89 17       	cp	r24, r25
 40a:	a9 f0       	breq	.+42     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 40c:	86 e2       	ldi	r24, 0x26	; 38
	{
		LCD_String("ACCESS DENIED!!!");
 40e:	92 e0       	ldi	r25, 0x02	; 2
 410:	06 df       	rcall	.-500    	; 0x21e <LCD_String>
 412:	8d b1       	in	r24, 0x0d	; 13
 414:	9f ef       	ldi	r25, 0xFF	; 255
		DDRE |= 0xFF;
 416:	9d b9       	out	0x0d, r25	; 13
 418:	8e b1       	in	r24, 0x0e	; 14
 41a:	82 60       	ori	r24, 0x02	; 2
		PORTE |= 0B00000010;
 41c:	8e b9       	out	0x0e, r24	; 14
 41e:	3f ef       	ldi	r19, 0xFF	; 255
 420:	83 ed       	ldi	r24, 0xD3	; 211
 422:	20 e3       	ldi	r18, 0x30	; 48
 424:	31 50       	subi	r19, 0x01	; 1
 426:	80 40       	sbci	r24, 0x00	; 0
 428:	20 40       	sbci	r18, 0x00	; 0
 42a:	e1 f7       	brne	.-8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42e:	00 00       	nop
 430:	9a b9       	out	0x0a, r25	; 10
 432:	82 e0       	ldi	r24, 0x02	; 2
				
		_delay_ms(1000);
		DDRD = 0xFF;//LED
 434:	8b b9       	out	0x0b, r24	; 11
		PORTD = 0x02;
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
	}
}
 43a:	08 95       	ret

0000043c <changePassword>:
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29

void changePassword(void)
{
	//CHECK THE PIN
	if ((eeprom_read_byte((uint8_t*)4)==password[0])&&(eeprom_read_byte((uint8_t*)5)==password[1])&&(eeprom_read_byte((uint8_t*)6)==password[2])&&(eeprom_read_byte((uint8_t*)7)==password[3]))
 440:	84 e0       	ldi	r24, 0x04	; 4
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	e0 d0       	rcall	.+448    	; 0x606 <eeprom_read_byte>
 446:	d8 2f       	mov	r29, r24
 448:	c0 91 96 02 	lds	r28, 0x0296	; 0x800296 <__data_end>
 44c:	8c 13       	cpse	r24, r28
 44e:	41 c0       	rjmp	.+130    	; 0x4d2 <changePassword+0x96>
 450:	85 e0       	ldi	r24, 0x05	; 5
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	d8 d0       	rcall	.+432    	; 0x606 <eeprom_read_byte>
 456:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <key>
 45a:	89 13       	cpse	r24, r25
 45c:	3a c0       	rjmp	.+116    	; 0x4d2 <changePassword+0x96>
 45e:	86 e0       	ldi	r24, 0x06	; 6
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	d1 d0       	rcall	.+418    	; 0x606 <eeprom_read_byte>
 464:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <__bss_end>
 468:	89 13       	cpse	r24, r25
 46a:	33 c0       	rjmp	.+102    	; 0x4d2 <changePassword+0x96>
 46c:	87 e0       	ldi	r24, 0x07	; 7
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	ca d0       	rcall	.+404    	; 0x606 <eeprom_read_byte>
 472:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <__bss_end+0x1>
 476:	89 13       	cpse	r24, r25
 478:	2c c0       	rjmp	.+88     	; 0x4d2 <changePassword+0x96>
	{
		Lcd_CmdWrite(0x01);
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	53 de       	rcall	.-858    	; 0x124 <Lcd_CmdWrite>
		LCD_String("ENTER NEW PIN");
 47e:	87 e3       	ldi	r24, 0x37	; 55
 480:	92 e0       	ldi	r25, 0x02	; 2
 482:	cd de       	rcall	.-614    	; 0x21e <LCD_String>
		Lcd_CmdWrite(0xC0);
 484:	80 ec       	ldi	r24, 0xC0	; 192
 486:	4e de       	rcall	.-868    	; 0x124 <Lcd_CmdWrite>
		getUserInput();
 488:	23 df       	rcall	.-442    	; 0x2d0 <getUserInput>
 48a:	60 91 96 02 	lds	r22, 0x0296	; 0x800296 <__data_end>
		eeprom_write_byte((uint8_t*)4,password[0]);
 48e:	84 e0       	ldi	r24, 0x04	; 4
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	c1 d0       	rcall	.+386    	; 0x616 <eeprom_write_byte>
 494:	60 91 97 02 	lds	r22, 0x0297	; 0x800297 <key>
		eeprom_write_byte((uint8_t*)5,password[1]);
 498:	85 e0       	ldi	r24, 0x05	; 5
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	bc d0       	rcall	.+376    	; 0x616 <eeprom_write_byte>
 49e:	60 91 98 02 	lds	r22, 0x0298	; 0x800298 <__bss_end>
		eeprom_write_byte((uint8_t*)6,password[2]);
 4a2:	86 e0       	ldi	r24, 0x06	; 6
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	b7 d0       	rcall	.+366    	; 0x616 <eeprom_write_byte>
		eeprom_write_byte((uint8_t*)7,password[3]);
 4a8:	60 91 99 02 	lds	r22, 0x0299	; 0x800299 <__bss_end+0x1>
 4ac:	87 e0       	ldi	r24, 0x07	; 7
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	b2 d0       	rcall	.+356    	; 0x616 <eeprom_write_byte>
 4b2:	81 e0       	ldi	r24, 0x01	; 1
		Lcd_CmdWrite(0x01);
 4b4:	37 de       	rcall	.-914    	; 0x124 <Lcd_CmdWrite>
 4b6:	85 e4       	ldi	r24, 0x45	; 69
		LCD_String("PASSWORD SAVED");
 4b8:	92 e0       	ldi	r25, 0x02	; 2
 4ba:	b1 de       	rcall	.-670    	; 0x21e <LCD_String>
 4bc:	2f ef       	ldi	r18, 0xFF	; 255
 4be:	8f e0       	ldi	r24, 0x0F	; 15
 4c0:	97 e2       	ldi	r25, 0x27	; 39
 4c2:	21 50       	subi	r18, 0x01	; 1
 4c4:	80 40       	sbci	r24, 0x00	; 0
 4c6:	90 40       	sbci	r25, 0x00	; 0
 4c8:	e1 f7       	brne	.-8      	; 0x4c2 <changePassword+0x86>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <changePassword+0x90>
 4cc:	00 00       	nop
 4ce:	2e d0       	rcall	.+92     	; 0x52c <goHome>
		_delay_ms(800);
		goHome();
 4d0:	2a c0       	rjmp	.+84     	; 0x526 <changePassword+0xea>
 4d2:	dc 13       	cpse	r29, r28
 4d4:	15 c0       	rjmp	.+42     	; 0x500 <changePassword+0xc4>
	}
	else if ((eeprom_read_byte((uint8_t*)4)!=password[0])||(eeprom_read_byte((uint8_t*)5)!=password[1])||(eeprom_read_byte((uint8_t*)6)!=password[2])||(eeprom_read_byte((uint8_t*)7)!=password[3]))
 4d6:	85 e0       	ldi	r24, 0x05	; 5
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	95 d0       	rcall	.+298    	; 0x606 <eeprom_read_byte>
 4dc:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <key>
 4e0:	89 13       	cpse	r24, r25
 4e2:	0e c0       	rjmp	.+28     	; 0x500 <changePassword+0xc4>
 4e4:	86 e0       	ldi	r24, 0x06	; 6
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	8e d0       	rcall	.+284    	; 0x606 <eeprom_read_byte>
 4ea:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <__bss_end>
 4ee:	89 13       	cpse	r24, r25
 4f0:	07 c0       	rjmp	.+14     	; 0x500 <changePassword+0xc4>
 4f2:	87 e0       	ldi	r24, 0x07	; 7
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	87 d0       	rcall	.+270    	; 0x606 <eeprom_read_byte>
 4f8:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <__bss_end+0x1>
 4fc:	89 17       	cp	r24, r25
 4fe:	99 f0       	breq	.+38     	; 0x526 <changePassword+0xea>
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	10 de       	rcall	.-992    	; 0x124 <Lcd_CmdWrite>
	{
		Lcd_CmdWrite(0x01);
 504:	84 e5       	ldi	r24, 0x54	; 84
 506:	92 e0       	ldi	r25, 0x02	; 2
 508:	8a de       	rcall	.-748    	; 0x21e <LCD_String>
		LCD_String("TRY AGAIN");
 50a:	2f ef       	ldi	r18, 0xFF	; 255
 50c:	8f e0       	ldi	r24, 0x0F	; 15
 50e:	97 e2       	ldi	r25, 0x27	; 39
 510:	21 50       	subi	r18, 0x01	; 1
 512:	80 40       	sbci	r24, 0x00	; 0
 514:	90 40       	sbci	r25, 0x00	; 0
 516:	e1 f7       	brne	.-8      	; 0x510 <changePassword+0xd4>
 518:	00 c0       	rjmp	.+0      	; 0x51a <changePassword+0xde>
 51a:	00 00       	nop
 51c:	07 d0       	rcall	.+14     	; 0x52c <goHome>
 51e:	8f ef       	ldi	r24, 0xFF	; 255
 520:	8a b9       	out	0x0a, r24	; 10
 522:	82 e0       	ldi	r24, 0x02	; 2
		_delay_ms(800);
		goHome();
 524:	8b b9       	out	0x0b, r24	; 11
 526:	df 91       	pop	r29
		DDRD = 0xFF;
 528:	cf 91       	pop	r28
 52a:	08 95       	ret

0000052c <goHome>:
		PORTD = 0x02;
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	fa dd       	rcall	.-1036   	; 0x124 <Lcd_CmdWrite>
	}
}
 530:	8e e5       	ldi	r24, 0x5E	; 94
 532:	92 e0       	ldi	r25, 0x02	; 2
 534:	74 de       	rcall	.-792    	; 0x21e <LCD_String>

void goHome(void)
{
	Lcd_CmdWrite(0x01);
	LCD_String("OPEN DOOR-*");
	Lcd_CmdWrite(0xC0);
 536:	80 ec       	ldi	r24, 0xC0	; 192
 538:	f5 dd       	rcall	.-1046   	; 0x124 <Lcd_CmdWrite>
	LCD_String("CHANGE PIN-#");
 53a:	8a e6       	ldi	r24, 0x6A	; 106
 53c:	92 e0       	ldi	r25, 0x02	; 2
 53e:	6f de       	rcall	.-802    	; 0x21e <LCD_String>
 540:	2f ef       	ldi	r18, 0xFF	; 255
 542:	83 ed       	ldi	r24, 0xD3	; 211
 544:	90 e3       	ldi	r25, 0x30	; 48
 546:	21 50       	subi	r18, 0x01	; 1
 548:	80 40       	sbci	r24, 0x00	; 0
 54a:	90 40       	sbci	r25, 0x00	; 0
 54c:	e1 f7       	brne	.-8      	; 0x546 <goHome+0x1a>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <goHome+0x24>
 550:	00 00       	nop
	_delay_ms(1000);
			
	key=getKey();
 552:	b8 de       	rcall	.-656    	; 0x2c4 <getKey>
 554:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <key>
	if(key=='*')
 558:	8a 32       	cpi	r24, 0x2A	; 42
	{
		Lcd_CmdWrite(0x01);
 55a:	61 f5       	brne	.+88     	; 0x5b4 <goHome+0x88>
 55c:	81 e0       	ldi	r24, 0x01	; 1
		LCD_String("ENTER PIN");
 55e:	e2 dd       	rcall	.-1084   	; 0x124 <Lcd_CmdWrite>
 560:	87 e7       	ldi	r24, 0x77	; 119
 562:	92 e0       	ldi	r25, 0x02	; 2
 564:	5c de       	rcall	.-840    	; 0x21e <LCD_String>
		Lcd_CmdWrite(0xC0);
 566:	80 ec       	ldi	r24, 0xC0	; 192
 568:	dd dd       	rcall	.-1094   	; 0x124 <Lcd_CmdWrite>
 56a:	2f ef       	ldi	r18, 0xFF	; 255
 56c:	89 e6       	ldi	r24, 0x69	; 105
 56e:	98 e1       	ldi	r25, 0x18	; 24
 570:	21 50       	subi	r18, 0x01	; 1
 572:	80 40       	sbci	r24, 0x00	; 0
 574:	90 40       	sbci	r25, 0x00	; 0
 576:	e1 f7       	brne	.-8      	; 0x570 <goHome+0x44>
 578:	00 c0       	rjmp	.+0      	; 0x57a <goHome+0x4e>
 57a:	00 00       	nop
		_delay_ms(500);

		getUserInput();//GET PIN INPUT FROM USER
 57c:	a9 de       	rcall	.-686    	; 0x2d0 <getUserInput>
 57e:	2f ef       	ldi	r18, 0xFF	; 255
 580:	89 e6       	ldi	r24, 0x69	; 105
 582:	98 e1       	ldi	r25, 0x18	; 24
 584:	21 50       	subi	r18, 0x01	; 1
 586:	80 40       	sbci	r24, 0x00	; 0
 588:	90 40       	sbci	r25, 0x00	; 0
 58a:	e1 f7       	brne	.-8      	; 0x584 <goHome+0x58>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <goHome+0x62>
				
		_delay_ms(500);
		Lcd_CmdWrite(0x01);		
 58e:	00 00       	nop
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	c8 dd       	rcall	.-1136   	; 0x124 <Lcd_CmdWrite>
		LCD_String("CHECKING...");
 594:	81 e8       	ldi	r24, 0x81	; 129
 596:	92 e0       	ldi	r25, 0x02	; 2
 598:	42 de       	rcall	.-892    	; 0x21e <LCD_String>
 59a:	2f ef       	ldi	r18, 0xFF	; 255
 59c:	89 e6       	ldi	r24, 0x69	; 105
 59e:	98 e1       	ldi	r25, 0x18	; 24
 5a0:	21 50       	subi	r18, 0x01	; 1
 5a2:	80 40       	sbci	r24, 0x00	; 0
 5a4:	90 40       	sbci	r25, 0x00	; 0
 5a6:	e1 f7       	brne	.-8      	; 0x5a0 <goHome+0x74>
		_delay_ms(500);
		Lcd_CmdWrite(0x01);
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <goHome+0x7e>
 5aa:	00 00       	nop

		checkPassword();//CHECK PASSWORD
 5ac:	81 e0       	ldi	r24, 0x01	; 1
				
	}
	else if(key='#')
 5ae:	ba dd       	rcall	.-1164   	; 0x124 <Lcd_CmdWrite>
 5b0:	b0 ce       	rjmp	.-672    	; 0x312 <checkPassword>
 5b2:	08 95       	ret
	{
		//check the pin again
		Lcd_CmdWrite(0x01);
 5b4:	83 e2       	ldi	r24, 0x23	; 35
 5b6:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <key>
		LCD_String("ENTER PIN");
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	b3 dd       	rcall	.-1178   	; 0x124 <Lcd_CmdWrite>
 5be:	87 e7       	ldi	r24, 0x77	; 119
 5c0:	92 e0       	ldi	r25, 0x02	; 2
		Lcd_CmdWrite(0xC0);
 5c2:	2d de       	rcall	.-934    	; 0x21e <LCD_String>
 5c4:	80 ec       	ldi	r24, 0xC0	; 192
 5c6:	ae dd       	rcall	.-1188   	; 0x124 <Lcd_CmdWrite>
		getUserInput();
 5c8:	83 de       	rcall	.-762    	; 0x2d0 <getUserInput>
 5ca:	38 cf       	rjmp	.-400    	; 0x43c <changePassword>
		changePassword();
 5cc:	08 95       	ret

000005ce <initPorts>:
 5ce:	8f ef       	ldi	r24, 0xFF	; 255
 5d0:	81 b9       	out	0x01, r24	; 1
}

void initPorts(void)
{
	LcdDataBusDirnReg = 0xFF;
	DDRD &= 0B00000001;
 5d2:	8a b1       	in	r24, 0x0a	; 10
 5d4:	81 70       	andi	r24, 0x01	; 1
 5d6:	8a b9       	out	0x0a, r24	; 10
 5d8:	08 95       	ret

000005da <main>:

void initPorts(void);

int main(void)
{
	DDRA = 0xff;
 5da:	8f ef       	ldi	r24, 0xFF	; 255
 5dc:	81 b9       	out	0x01, r24	; 1
	DDRC = 0xf0;
 5de:	80 ef       	ldi	r24, 0xF0	; 240
 5e0:	87 b9       	out	0x07, r24	; 7
	initPorts();
 5e2:	f5 df       	rcall	.-22     	; 0x5ce <initPorts>
	Lcd_init();
 5e4:	11 de       	rcall	.-990    	; 0x208 <Lcd_init>
 5e6:	8d e8       	ldi	r24, 0x8D	; 141
// 	eeprom_write_byte((uint8_t*)4,'6');
// 	eeprom_write_byte((uint8_t*)5,'5');
// 	eeprom_write_byte((uint8_t*)6,'4');
// 	eeprom_write_byte((uint8_t*)7,'5');
	
	LCD_String("WELCOME");
 5e8:	92 e0       	ldi	r25, 0x02	; 2
 5ea:	19 de       	rcall	.-974    	; 0x21e <LCD_String>
 5ec:	2f ef       	ldi	r18, 0xFF	; 255
 5ee:	83 ed       	ldi	r24, 0xD3	; 211
 5f0:	90 e3       	ldi	r25, 0x30	; 48
 5f2:	21 50       	subi	r18, 0x01	; 1
 5f4:	80 40       	sbci	r24, 0x00	; 0
 5f6:	90 40       	sbci	r25, 0x00	; 0
 5f8:	e1 f7       	brne	.-8      	; 0x5f2 <main+0x18>
 5fa:	00 c0       	rjmp	.+0      	; 0x5fc <main+0x22>
 5fc:	00 00       	nop
	_delay_ms(1000);
	goHome();
 5fe:	96 df       	rcall	.-212    	; 0x52c <goHome>
 600:	80 e0       	ldi	r24, 0x00	; 0
}
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	08 95       	ret

00000606 <eeprom_read_byte>:
 606:	f9 99       	sbic	0x1f, 1	; 31
 608:	fe cf       	rjmp	.-4      	; 0x606 <eeprom_read_byte>
 60a:	92 bd       	out	0x22, r25	; 34
 60c:	81 bd       	out	0x21, r24	; 33
 60e:	f8 9a       	sbi	0x1f, 0	; 31
 610:	99 27       	eor	r25, r25
 612:	80 b5       	in	r24, 0x20	; 32
 614:	08 95       	ret

00000616 <eeprom_write_byte>:
 616:	26 2f       	mov	r18, r22

00000618 <eeprom_write_r18>:
 618:	f9 99       	sbic	0x1f, 1	; 31
 61a:	fe cf       	rjmp	.-4      	; 0x618 <eeprom_write_r18>
 61c:	1f ba       	out	0x1f, r1	; 31
 61e:	92 bd       	out	0x22, r25	; 34
 620:	81 bd       	out	0x21, r24	; 33
 622:	20 bd       	out	0x20, r18	; 32
 624:	0f b6       	in	r0, 0x3f	; 63
 626:	f8 94       	cli
 628:	fa 9a       	sbi	0x1f, 2	; 31
 62a:	f9 9a       	sbi	0x1f, 1	; 31
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	01 96       	adiw	r24, 0x01	; 1
 630:	08 95       	ret

00000632 <_exit>:
 632:	f8 94       	cli

00000634 <__stop_program>:
 634:	ff cf       	rjmp	.-2      	; 0x634 <__stop_program>
